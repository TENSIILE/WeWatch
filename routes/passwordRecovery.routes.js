const {Router}   = require('express')
const nodemailer = require("nodemailer")
const User       = require('../models/User')
const bcrypt     = require('bcryptjs')

const router = Router()

const fromPerson = '"WeWatch üëª" <wewatch.inc@mail.ru>'

const subjectMessage = {
    passwordRecovery: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ WeWatch'
}

const sendMail = async (subjectMail, email) => {
    const transporter = nodemailer.createTransport({
        host: "smtp.mail.ru",
        port: 465,
        secure: true,
        auth: {
            user: "wewatch.inc@mail.ru", 
            pass: "messenger2020",
        },
        
    }, {
        from: 'Mailer WeWatch <wewatch.inc@mail.ru>'
    })

    await transporter.sendMail({
        from: fromPerson,
        to: email.to, 
        subject: subjectMail,
        text: email.text, 
        html: email.html
    })

    return true
}

const generateKeys = len => {
    const symbols  = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
    let password   = ""
    for (let i = 0; i < len; i++) {
        password += symbols.charAt(Math.floor(Math.random() * symbols.length)) 
    }
    return password
}

const clearingKeys = email => {
    setTimeout(async () => {
        await User.findOneAndUpdate(
            { email },
            { $set: { recoveryCode: "" } },
            { new: false }
        )
    }, 300_000)
}

router.post('/getKeyByMail', async (req, res) => {
    try {
        
        const { email } = req.body

        const user = await User.findOne({ email })

        if (!user) {
            return res.status(400).json({ message: '–¢–∞–∫–æ–π –ø–æ—á—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!' })
        }

        const newKey = generateKeys(16)

        const messageHTML = `
                <h2>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${user.login}!</h2>
                <p>–≠—Ç–æ –≤–∞—à –∫–æ–¥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –≤ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ WeWatch:
                    <br/>
                <h3>–ö–æ–¥: <strong>${newKey}</strong></h3>
                    <br/>
                –û–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —á—Ç–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ —è–≤–ª—è–µ—Ç–µ—Å—å –∏–º–µ–Ω–Ω–æ –≤—ã.
                    <br/>
                    <br/>
                –í —Ü–µ–ª—è—Ö –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥ —Å—Ç–∞–Ω–µ—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.
                    <br/>
                    <br/>
                –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ,
                    <br/>
                    <br/>
                –ö–æ–º–∞–Ω–¥–∞ WeWatch</p>`

        sendMail(subjectMessage.passwordRecovery, {
            to: email,
            text: '',
            html: messageHTML
        })

        await User.findOneAndUpdate(
            { email },
            { $set: { recoveryCode: newKey } },
            { new: false }
        )
    
        res.json({ message: '–ö–ª—é—á –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –±—ã–ª –≤—ã—Å—Ç–∞–Ω –Ω–∞ –ø–æ—á—Ç—É!' })
        
        clearingKeys(email)

    } catch (e) {
        res.status(500).json({ message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!' })
    }
})

router.post('/keyVerification', async (req, res) => {
    try {

        const { email, key } = req.body

        const user = await User.findOne({ email })

        if (user.recoveryCode === key) {

            res.json({ message:'–ö–ª—é—á–∏ —Å–æ–≤–ø–∞–ª–∏!' })

        } else {
            throw new Error('–ö–ª—é—á–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!')
        }

    } catch (e) {
        res.status(500).json({ message: e.message ? e.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!' })
    }
})

router.post('/AssigningNewPassword', async (req, res) => {
    try {
        
        const { email, new_password } = req.body

        const hashedPassword = await bcrypt.hash(new_password, 12)

        await User.findOneAndUpdate(
            { email },
            { $set: { password: hashedPassword } },
            { new: false }
        )

        res.json({ message: '–ü–∞—Ä–æ–ª—å –≤ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ WeWatch –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!' })

    } catch (e) {
        res.status(500).json({ message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!' })
    }
})

module.exports = router